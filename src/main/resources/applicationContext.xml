<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:tool="http://www.springframework.org/schema/tool"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:task="http://www.springframework.org/schema/task"
       xmlns:xsd="http://www.w3.org/2001/XMLSchema"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:mongo="http://www.springframework.org/schema/data/mongo"
       xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"
       xmlns:rabbit="http://www.springframework.org/schema/rabbit"
       xmlns:cache="http://www.springframework.org/schema/cache"
       xsi:schemaLocation="
  		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
		http://www.springframework.org/schema/tool http://www.springframework.org/schema/tool/spring-tool-3.1.xsd
  		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
  		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
  		http://www.springframework.org/schema/mvc  http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd
  		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
  		http://www.springframework.org/schema/data/mongo http://www.springframework.org/schema/data/mongo/spring-mongo-1.10.xsd
  		http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd
  		http://www.springframework.org/schema/rabbit http://www.springframework.org/schema/rabbit/spring-rabbit-1.0.xsd
        http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache-4.2.xsd">
    <bean id="propertyConfigurer"
          class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="location">
            <value>/WEB-INF/conf/system.properties</value>
        </property>
        <property name="fileEncoding" value="utf-8"/>
    </bean>

    <!--credentials的配置形式是：用户名:密码@默认数据库 -->
    <mongo:mongo-client id="mongoClient"
                        host="${mongo.host}" port="${mongo.port}"
                        credentials="${mongo.username}:${mongo.password}@${mongo.dbname}">
        <mongo:client-options write-concern="SAFE"
                              connections-per-host="${mongo.connectionsPerHost}"
                              threads-allowed-to-block-for-connection-multiplier="${mongo.threadsAllowedToBlockForConnectionMultiplier}"
                              connect-timeout="${mongo.connectTimeout}"
                              max-wait-time="${mongo.maxWaitTime}"
                              socket-timeout="${mongo.socketTimeout}"/>
    </mongo:mongo-client>
    <mongo:db-factory id="mongoDbFactory"
                      dbname="${mongo.dbname}" mongo-ref="mongoClient"/>
    <bean id="mongoTemplate"
          class="org.springframework.data.mongodb.core.MongoTemplate">
        <constructor-arg name="mongoDbFactory"
                         ref="mongoDbFactory"/>
    </bean>

    <!--配置spring的定时器-->
    <task:annotation-driven scheduler="qbScheduler" mode="proxy"/>
    <task:scheduler id="qbScheduler" pool-size="10"/>


    <!-- redis 配置 -->
    <bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxIdle" value="${redis.maxIdle}"/>
    </bean>
    <bean id="jedisConnectionFactory"
          class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"
          destroy-method="destroy">
        <property name="hostName" value="${redis.host}"/>
        <property name="port" value="${redis.port}"/>
        <property name="password" value="${redis.pass}"/>
        <property name="database" value="${redis.default.db}"/>
        <property name="timeout" value="${redis.timeout}"/>
        <property name="usePool" value="true"/>
        <property name="poolConfig" ref="poolConfig"/>
    </bean>
    <bean id="keySerializer"
          class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
    <bean id="valueSerializer"
          class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"/>
    <bean id="redisTemplate"
          class="org.springframework.data.redis.core.RedisTemplate">
        <property name="connectionFactory"
                  ref="jedisConnectionFactory"/>
        <property name="keySerializer" ref="keySerializer"/>
        <property name="valueSerializer" ref="valueSerializer"/>
    </bean>

    <bean id="cacheManager"
          class="org.springframework.data.redis.cache.RedisCacheManager">
        <constructor-arg ref="redisTemplate"/>
    </bean>

    <bean id="dataSource"
          class="com.alibaba.druid.pool.DruidDataSource">
        <property name="driverClassName"
                  value="com.mysql.jdbc.Driver"/>
        <!--property name="url"
            value="jdbc:mysql://rm-uf6176zi1r3n18918oo.mysql.rds.aliyuncs.com:3306/hqcxzc?useUnicode=true&amp;characterEncoding=UTF-8" />
        <property name="username" value="test_hqzc" />
        <property name="password" value="Mdb8fGCj" /-->
        <property name="url"
                  value="jdbc:mysql://192.168.0.116:3306/chuxing?useUnicode=true&amp;characterEncoding=UTF-8"/>
        <property name="username" value="root"/>
        <property name="password" value="root"/>
        <property name="initialSize" value="10"/>
        <property name="minIdle" value="10"/>
        <property name="maxActive" value="500"/>
        <property name="maxWait" value="60000"/>
        <property name="timeBetweenEvictionRunsMillis" value="30000"/>
        <property name="minEvictableIdleTimeMillis" value="300000"/>
        <property name="validationQuery" value="SELECT 'x'"/>
        <property name="testWhileIdle" value="true"/>
        <property name="testOnBorrow" value="false"/>
        <property name="testOnReturn" value="false"/>
        <property name="poolPreparedStatements" value="true"/>
        <property name="maxPoolPreparedStatementPerConnectionSize"
                  value="20"/>
        <property name="filters" value="stat"/>
    </bean>

    <!-- Spring默认连接池 -->
    <!--bean id="dataSource"
        class="com.alibaba.druid.pool.DruidDataSource">
        <property name="driverClassName"
            value="com.mysql.jdbc.Driver" />
        <property name="url"
            value="jdbc:mysql://uf6176zi1r3n18918oo.mysql.rds.aliyuncs.com:3306/hqcxzc?useUnicode=true&amp;characterEncoding=UTF-8" />
        <property name="username" value="test_hqzc" />
        <property name="password" value="Mdb8fGCj" />
    </bean-->

    <!-- 定义JDBCTemplate类 -->
    <!-- 为JDBC模板注入连接池属性 -->
    <bean id="jdbcTemplate"
          class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!--bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="driverClassName" value="${jdbc.driver}" /> <property name="url"
        value="${jdbc.url}" /> <property name="username" value="${jdbc.username}"
        /> <property name="password" value="${jdbc.password}" /> <property name="initialSize"
        value="10" /> <property name="minIdle" value="10" /> <property name="maxActive"
        value="500" /> <property name="maxWait" value="60000" /> <property name="timeBetweenEvictionRunsMillis"
        value="30000" /> <property name="minEvictableIdleTimeMillis" value="300000"
        /> <property name="validationQuery" value="SELECT 'x'" /> <property name="testWhileIdle"
        value="true" /> <property name="testOnBorrow" value="false" /> <property
        name="testOnReturn" value="false" /> <property name="poolPreparedStatements"
        value="true" /> <property name="maxPoolPreparedStatementPerConnectionSize"
        value="20" /> <property name="filters" value="stat" /> </bean -->

    <!-- 配置druid监控spring jdbc -->
    <!--bean id="druid-stat-interceptor" class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor">
        </bean> <aop:config> <aop:advisor advice-ref="druid-stat-interceptor" pointcut-ref="druid-stat-pointcut"
        /> </aop:config> <bean id="druid-stat-pointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut"
        scope="prototype"> <property name="patterns"> <list> <value>com.jmhqmc.demo.service.*</value>
        </list> </property> </bean -->

    <!-- 配置Hibernate -->
    <!--bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
        <property name="dataSource" ref="dataSource"></property> <property name="packagesToScan">
        <list> <value>com.jmhqmc.demo.entity</value> </list> </property> <property
        name="hibernateProperties"> <props> <prop key="dialect">org.hibernate.dialect.MySqlDialect</prop>
        <prop key="hibernate.show_sql">true</prop> <prop key="hibernate.format_sql">true</prop>
        </props> </property> </bean -->

    <!-- 开启AOP监听 只对当前配置文件有效 -->
    <aop:aspectj-autoproxy/>

    <!-- Hibernate4 配置事务管理器 -->
    <!--bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory" /> </bean> <tx:annotation-driven
        proxy-target-class="true" transaction-manager="transactionManager" / -->

    <context:annotation-config/>
    <context:component-scan
            base-package="com.jmhqmc.demo.service"/>
    <context:component-scan
            base-package="com.jmhqmc.demo.dao"/>
    <context:component-scan
            base-package="com.jmhqmc.demo.aspect"/>
    <context:component-scan
            base-package="com.jmhqmc.demo.mq"/>

    <task:annotation-driven executor="asyncExecutor"/>
    <task:executor id="asyncExecutor" pool-size="5-20" queue-capacity="100" rejection-policy="CALLER_RUNS"/>


    <!-- 应用名 -->
    <dubbo:application name="call-provider"/>
    <!-- 连接到哪个本地注册中心 -->
    <dubbo:registry id="call"
                    address="zookeeper://localhost:2181"/>
    <!-- 用dubbo协议在20880端口暴露服务 -->
    <dubbo:protocol name="dubbo" port="28080"/>
    <!-- 声明需要暴露的服务接口 -->
    <dubbo:service registry="call" timeout="3000"
                   interface="com.jmhqmc.demo.service.CallService" ref="callService"/>

    <!--rabbit:connection-factory id="connectionFactory" host="${mq.host}" username="${mq.username}" password="${mq.password}" port="${mq.port}" />
    <rabbit:admin connection-factory="connectionFactory"/>
    <rabbit:template id="amqpTemplate" exchange="xk-test-mq-exchange" connection-factory="connectionFactory" />
    <rabbit:queue id="${mq.queue}" name="${mq.queue}" durable="true" auto-delete="false" exclusive="false" />
    <rabbit:direct-exchange name="xk-test-mq-exchange" durable="true" auto-delete="false" id="xk-test-mq-exchange">
        <rabbit:bindings>
            <rabbit:binding queue="${mq.queue}" key="${mq.queue}"/>
        </rabbit:bindings>
    </rabbit:direct-exchange-->

    <!--配置连接-->
    <rabbit:connection-factory id="connectionFactory" host="${mq.host}"
                               username="${mq.username}" password="${mq.password}"/>
    <rabbit:template id="amqpTemplate" connection-factory="connectionFactory"
                     exchange="${mq.queue}" routing-key="${mq.queue}"/>
    <rabbit:admin connection-factory="connectionFactory"/>
    <rabbit:queue name="${mq.queue}"/>
    <rabbit:topic-exchange name="test">
        <rabbit:bindings>
            <rabbit:binding queue="${mq.queue}" pattern="${mq.queue}"/>
        </rabbit:bindings>
    </rabbit:topic-exchange>

    <!-- 消费者 -->
    <rabbit:listener-container connection-factory="connectionFactory">
        <rabbit:listener ref="foo" response-exchange="test" queue-names="${mq.queue}"/>
    </rabbit:listener-container>

</beans>